'''

В неориентированном графе требуется найти минимальный путь между двумя вершинами.
Формат ввода

Первым на вход поступает число N – количество вершин в графе (1 ≤ N ≤ 100). Затем записана матрица смежности (0 обозначает отсутствие ребра, 1 – наличие ребра). Далее задаются номера двух вершин – начальной и конечной.

Формат вывода

Выведите сначала L – длину кратчайшего пути (количество ребер, которые нужно пройти), а потом сам путь. Если путь имеет длину 0, то его выводить не нужно, достаточно вывести длину.

Необходимо вывести путь (номера всех вершин в правильном порядке). Если пути нет, нужно вывести -1.
'''
from queue import Queue
n = int(input())
graph = [[0 for i in range(n)] for j in range(n)]
d = [0 for _ in range(n)]
for i in range(n):
    d[i] = 1000000
    a = list(map(int, input().split()))
    for j in range(n):
        graph[i][j] = a[j]
x, y = map(int, input().split())
x, y = x-1, y-1
q = Queue()
d[x] = 0
path = [0 for _ in range(n)]
q.put(x)
while (not q.empty()):
    i = q.get()
    for j in range(n):
        if graph[i][j] and d[j] > d[i]+1:
            d[j] = d[i]+1
            q.put(j)
            path[j] = i
if d[y] < 1000000:
    print(d[y])
    if d[y] != 0:
        i = y+1
        f = []
        while i != x+1:
            f.append(i)
            i = path[i-1]+1
        f.append(x+1)
        print(*f[::-1])
else:
    print(-1)
